{"ast":null,"code":"import axios from 'axios';\n\n// Determine the API URL based on environment\nconst determineApiUrl = () => {\n  // If explicit API URL is provided in environment, use it\n  if (process.env.REACT_APP_API_URL) {\n    return process.env.REACT_APP_API_URL;\n  }\n\n  // For Render deployment: if frontend is on render.com, assume backend is too\n  if (window.location.hostname.includes('render.com') || window.location.hostname.includes('onrender.com')) {\n    // Extract the app name from the hostname (e.g., gulp-frontend-abc.onrender.com -> gulp)\n    const hostParts = window.location.hostname.split('-');\n    if (hostParts.length > 0) {\n      const appPrefix = hostParts[0]; // e.g., 'gulp'\n      // Construct backend URL with same app prefix but -backend suffix\n      return `https://${appPrefix}-backend.onrender.com`;\n    }\n    // Fallback for Render but unknown pattern\n    return window.location.origin.replace('frontend', 'backend');\n  }\n\n  // Local development\n  return 'http://localhost:8001'; // Updated to match our current port\n};\nconst API_URL = determineApiUrl();\nconsole.log('Using API URL:', API_URL);\n\n// Create axios instance with base URL\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  // Add withCredentials for CORS with credentials\n  withCredentials: API_URL.includes('render.com') || API_URL.includes('onrender.com')\n});\n\n// Get recent projects (last 24h) with optional filters\nexport const getProjects = async (params = {}) => {\n  try {\n    // Make sure we're using the correct parameter name for show_all\n    const apiParams = {\n      ...params\n    };\n\n    // If show_all is present, make sure it's sent as a string 'true' or 'false'\n    if (apiParams.show_all !== undefined) {\n      apiParams.show_all = apiParams.show_all.toString();\n    }\n    console.log('API call to /projects with params:', apiParams);\n    const response = await api.get('/projects', {\n      params: apiParams\n    });\n    console.log('API response status:', response.status);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching recent projects:', error);\n    throw error;\n  }\n};\n\n// Get archived projects (older than 24h) with optional filters\nexport const getArchivedProjects = async (params = {}) => {\n  try {\n    const response = await api.get('/projects/archive', {\n      params\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching archived projects:', error);\n    throw error;\n  }\n};\n\n// Get scraper status\nexport const getScraperStatus = async () => {\n  try {\n    const response = await api.get('/status');\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching scraper status:', error);\n    throw error;\n  }\n};\n\n// Trigger a new scrape\nexport const triggerScrape = async (options = {}) => {\n  try {\n    const response = await api.post('/scrape', options);\n    return response.data;\n  } catch (error) {\n    console.error('Error triggering scrape:', error);\n    throw error;\n  }\n};\n\n// Get new projects\nexport const getNewProjects = async () => {\n  try {\n    const response = await api.get('/new-projects');\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching new projects:', error);\n    throw error;\n  }\n};\n\n// Mark projects as seen\nexport const markProjectsAsSeen = async projectIds => {\n  try {\n    const response = await api.post('/mark-projects-seen', projectIds);\n    return response.data;\n  } catch (error) {\n    console.error('Error marking projects as seen:', error);\n    throw error;\n  }\n};\n\n// Get email configuration\nexport const getEmailConfig = async () => {\n  try {\n    const response = await api.get('/api/email/config');\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching email configuration:', error);\n    throw error;\n  }\n};\n\n// Test email configuration\nexport const testEmailConfig = async (recipient = null) => {\n  try {\n    const formData = new FormData();\n    if (recipient) {\n      formData.append('email', recipient);\n    }\n    const response = await api.post('/api/email/test', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error testing email configuration:', error);\n    throw error;\n  }\n};\n\n// Get scheduler configuration\nexport const getSchedulerConfig = async () => {\n  try {\n    const response = await api.get('/scheduler-config');\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching scheduler configuration:', error);\n    throw error;\n  }\n};\n\n// Set email configuration\nexport const setEmailConfig = async config => {\n  try {\n    const response = await api.post('/api/email/config', config);\n    return response.data;\n  } catch (error) {\n    console.error('Error setting email configuration:', error);\n    throw error;\n  }\n};\n\n// Set scheduler configuration\nexport const setSchedulerConfig = async config => {\n  try {\n    const response = await api.post('/scheduler-config', config);\n    return response.data;\n  } catch (error) {\n    console.error('Error setting scheduler configuration:', error);\n    throw error;\n  }\n};\n\n// Get a single project by ID\nexport const getProjectById = async id => {\n  try {\n    const response = await api.get(`/projects/${id}`);\n    return response.data;\n  } catch (error) {\n    console.error(`Error fetching project with ID ${id}:`, error);\n    throw error;\n  }\n};\n\n// Helper function to manage favorites in localStorage\nexport const favoritesManager = {\n  // Get all favorites\n  getFavorites: () => {\n    try {\n      return JSON.parse(localStorage.getItem('favorites')) || [];\n    } catch (error) {\n      console.error('Error getting favorites from localStorage:', error);\n      return [];\n    }\n  },\n  // Add a project to favorites\n  addFavorite: project => {\n    try {\n      const favorites = favoritesManager.getFavorites();\n      // Check if project is already in favorites\n      if (!favorites.some(fav => fav.id === project.id)) {\n        favorites.push(project);\n        localStorage.setItem('favorites', JSON.stringify(favorites));\n      }\n      return favorites;\n    } catch (error) {\n      console.error('Error adding favorite to localStorage:', error);\n      return [];\n    }\n  },\n  // Remove a project from favorites\n  removeFavorite: projectId => {\n    try {\n      let favorites = favoritesManager.getFavorites();\n      favorites = favorites.filter(fav => fav.id !== projectId);\n      localStorage.setItem('favorites', JSON.stringify(favorites));\n      return favorites;\n    } catch (error) {\n      console.error('Error removing favorite from localStorage:', error);\n      return [];\n    }\n  },\n  // Check if a project is in favorites\n  isFavorite: projectId => {\n    try {\n      const favorites = favoritesManager.getFavorites();\n      return favorites.some(fav => fav.id === projectId);\n    } catch (error) {\n      console.error('Error checking if project is favorite:', error);\n      return false;\n    }\n  }\n};\nexport default {\n  getProjects,\n  getProjectById,\n  getScraperStatus,\n  triggerScrape,\n  getNewProjects,\n  markProjectsAsSeen,\n  getEmailConfig,\n  setEmailConfig,\n  getSchedulerConfig,\n  setSchedulerConfig,\n  favoritesManager\n};","map":{"version":3,"names":["axios","determineApiUrl","process","env","REACT_APP_API_URL","window","location","hostname","includes","hostParts","split","length","appPrefix","origin","replace","API_URL","console","log","api","create","baseURL","headers","withCredentials","getProjects","params","apiParams","show_all","undefined","toString","response","get","status","data","error","getArchivedProjects","getScraperStatus","triggerScrape","options","post","getNewProjects","markProjectsAsSeen","projectIds","getEmailConfig","testEmailConfig","recipient","formData","FormData","append","getSchedulerConfig","setEmailConfig","config","setSchedulerConfig","getProjectById","id","favoritesManager","getFavorites","JSON","parse","localStorage","getItem","addFavorite","project","favorites","some","fav","push","setItem","stringify","removeFavorite","projectId","filter","isFavorite"],"sources":["/Users/mbanner/CascadeProjects/gulp-job-app/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\n// Determine the API URL based on environment\nconst determineApiUrl = () => {\n  // If explicit API URL is provided in environment, use it\n  if (process.env.REACT_APP_API_URL) {\n    return process.env.REACT_APP_API_URL;\n  }\n  \n  // For Render deployment: if frontend is on render.com, assume backend is too\n  if (window.location.hostname.includes('render.com') || \n      window.location.hostname.includes('onrender.com')) {\n    // Extract the app name from the hostname (e.g., gulp-frontend-abc.onrender.com -> gulp)\n    const hostParts = window.location.hostname.split('-');\n    if (hostParts.length > 0) {\n      const appPrefix = hostParts[0]; // e.g., 'gulp'\n      // Construct backend URL with same app prefix but -backend suffix\n      return `https://${appPrefix}-backend.onrender.com`;\n    }\n    // Fallback for Render but unknown pattern\n    return window.location.origin.replace('frontend', 'backend');\n  }\n  \n  // Local development\n  return 'http://localhost:8001'; // Updated to match our current port\n};\n\nconst API_URL = determineApiUrl();\nconsole.log('Using API URL:', API_URL);\n\n// Create axios instance with base URL\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n  // Add withCredentials for CORS with credentials\n  withCredentials: API_URL.includes('render.com') || API_URL.includes('onrender.com'),\n});\n\n// Get recent projects (last 24h) with optional filters\nexport const getProjects = async (params = {}) => {\n  try {\n    // Make sure we're using the correct parameter name for show_all\n    const apiParams = { ...params };\n    \n    // If show_all is present, make sure it's sent as a string 'true' or 'false'\n    if (apiParams.show_all !== undefined) {\n      apiParams.show_all = apiParams.show_all.toString();\n    }\n    \n    console.log('API call to /projects with params:', apiParams);\n    const response = await api.get('/projects', { params: apiParams });\n    console.log('API response status:', response.status);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching recent projects:', error);\n    throw error;\n  }\n};\n\n// Get archived projects (older than 24h) with optional filters\nexport const getArchivedProjects = async (params = {}) => {\n  try {\n    const response = await api.get('/projects/archive', { params });\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching archived projects:', error);\n    throw error;\n  }\n};\n\n// Get scraper status\nexport const getScraperStatus = async () => {\n  try {\n    const response = await api.get('/status');\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching scraper status:', error);\n    throw error;\n  }\n};\n\n// Trigger a new scrape\nexport const triggerScrape = async (options = {}) => {\n  try {\n    const response = await api.post('/scrape', options);\n    return response.data;\n  } catch (error) {\n    console.error('Error triggering scrape:', error);\n    throw error;\n  }\n};\n\n// Get new projects\nexport const getNewProjects = async () => {\n  try {\n    const response = await api.get('/new-projects');\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching new projects:', error);\n    throw error;\n  }\n};\n\n// Mark projects as seen\nexport const markProjectsAsSeen = async (projectIds) => {\n  try {\n    const response = await api.post('/mark-projects-seen', projectIds);\n    return response.data;\n  } catch (error) {\n    console.error('Error marking projects as seen:', error);\n    throw error;\n  }\n};\n\n// Get email configuration\nexport const getEmailConfig = async () => {\n  try {\n    const response = await api.get('/api/email/config');\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching email configuration:', error);\n    throw error;\n  }\n};\n\n// Test email configuration\nexport const testEmailConfig = async (recipient = null) => {\n  try {\n    const formData = new FormData();\n    if (recipient) {\n      formData.append('email', recipient);\n    }\n    \n    const response = await api.post('/api/email/test', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n      },\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error testing email configuration:', error);\n    throw error;\n  }\n};\n\n// Get scheduler configuration\nexport const getSchedulerConfig = async () => {\n  try {\n    const response = await api.get('/scheduler-config');\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching scheduler configuration:', error);\n    throw error;\n  }\n};\n\n// Set email configuration\nexport const setEmailConfig = async (config) => {\n  try {\n    const response = await api.post('/api/email/config', config);\n    return response.data;\n  } catch (error) {\n    console.error('Error setting email configuration:', error);\n    throw error;\n  }\n};\n\n// Set scheduler configuration\nexport const setSchedulerConfig = async (config) => {\n  try {\n    const response = await api.post('/scheduler-config', config);\n    return response.data;\n  } catch (error) {\n    console.error('Error setting scheduler configuration:', error);\n    throw error;\n  }\n};\n\n// Get a single project by ID\nexport const getProjectById = async (id) => {\n  try {\n    const response = await api.get(`/projects/${id}`);\n    return response.data;\n  } catch (error) {\n    console.error(`Error fetching project with ID ${id}:`, error);\n    throw error;\n  }\n};\n\n// Helper function to manage favorites in localStorage\nexport const favoritesManager = {\n  // Get all favorites\n  getFavorites: () => {\n    try {\n      return JSON.parse(localStorage.getItem('favorites')) || [];\n    } catch (error) {\n      console.error('Error getting favorites from localStorage:', error);\n      return [];\n    }\n  },\n  \n  // Add a project to favorites\n  addFavorite: (project) => {\n    try {\n      const favorites = favoritesManager.getFavorites();\n      // Check if project is already in favorites\n      if (!favorites.some(fav => fav.id === project.id)) {\n        favorites.push(project);\n        localStorage.setItem('favorites', JSON.stringify(favorites));\n      }\n      return favorites;\n    } catch (error) {\n      console.error('Error adding favorite to localStorage:', error);\n      return [];\n    }\n  },\n  \n  // Remove a project from favorites\n  removeFavorite: (projectId) => {\n    try {\n      let favorites = favoritesManager.getFavorites();\n      favorites = favorites.filter(fav => fav.id !== projectId);\n      localStorage.setItem('favorites', JSON.stringify(favorites));\n      return favorites;\n    } catch (error) {\n      console.error('Error removing favorite from localStorage:', error);\n      return [];\n    }\n  },\n  \n  // Check if a project is in favorites\n  isFavorite: (projectId) => {\n    try {\n      const favorites = favoritesManager.getFavorites();\n      return favorites.some(fav => fav.id === projectId);\n    } catch (error) {\n      console.error('Error checking if project is favorite:', error);\n      return false;\n    }\n  }\n};\n\nexport default {\n  getProjects,\n  getProjectById,\n  getScraperStatus,\n  triggerScrape,\n  getNewProjects,\n  markProjectsAsSeen,\n  getEmailConfig,\n  setEmailConfig,\n  getSchedulerConfig,\n  setSchedulerConfig,\n  favoritesManager\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}