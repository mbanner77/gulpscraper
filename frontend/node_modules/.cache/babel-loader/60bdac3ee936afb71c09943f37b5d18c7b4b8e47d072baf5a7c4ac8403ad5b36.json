{"ast":null,"code":"import React,{useState,useEffect}from'react';import{Box,Button,Card,CardContent,Typography,TextField,CircularProgress,Alert,Accordion,AccordionSummary,AccordionDetails,Chip,Stack,Divider,FormControl,InputLabel,Select,MenuItem,FormHelperText,Paper}from'@mui/material';import ExpandMoreIcon from'@mui/icons-material/ExpandMore';import SmartToyIcon from'@mui/icons-material/SmartToy';import{getAIConfig}from'../utils/aiConfig';/**\n * Component for AI-powered project analysis\n * Uses Hugging Face Inference API for free AI capabilities\n */import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const AIProjectAnalyzer=_ref=>{var _availableModels$find;let{project,onClose}=_ref;const[loading,setLoading]=useState(false);const[error,setError]=useState(null);const[result,setResult]=useState(null);const[customPrompt,setCustomPrompt]=useState('');const[analysisType,setAnalysisType]=useState('skills');const[config,setConfig]=useState(null);// Lade KI-Konfiguration beim Komponenten-Mount\nuseEffect(()=>{const aiConfig=getAIConfig();setConfig(aiConfig);},[]);// Available free models\nconst availableModels=[{id:'google/flan-t5-small',name:'Flan-T5 Small (schnell)',type:'text'},{id:'google/flan-t5-base',name:'Flan-T5 Base (ausgewogen)',type:'text'},{id:'gpt2',name:'GPT-2 (kreativ)',type:'text'}];// Analysis types\nconst analysisTypes=[{id:'skills',name:'Benötigte Skills',prompt:'Welche Fähigkeiten und Technologien werden für dieses Projekt benötigt? Liste sie als Stichpunkte auf.'},{id:'summary',name:'Projektzusammenfassung',prompt:'Fasse dieses Projekt in 3-5 Sätzen zusammen.'},{id:'salary',name:'Gehaltseinschätzung',prompt:'Schätze den möglichen Tagessatz für dieses Projekt basierend auf den Anforderungen und dem Standort. Gib eine Spanne an.'},{id:'custom',name:'Benutzerdefinierte Analyse',prompt:''}];// Get the current analysis type object\nconst currentAnalysisType=analysisTypes.find(type=>type.id===analysisType);// Prepare project data for analysis\nconst prepareProjectData=()=>{const{title,description,location,skills,companyName}=project;return\"\\nProjekttitel: \".concat(title||'Nicht angegeben',\"\\nBeschreibung: \").concat(description||'Keine Beschreibung verfügbar',\"\\nStandort: \").concat(location||'Nicht angegeben',\"\\nFirma: \").concat(companyName||'Nicht angegeben',\"\\nSkills: \").concat(Array.isArray(skills)?skills.join(', '):skills||'Keine Skills angegeben',\"\\n    \").trim();};// Generate the prompt for the AI model\nconst generatePrompt=()=>{if(analysisType==='custom'){return\"\".concat(prepareProjectData(),\"\\n\\n\").concat(customPrompt);}return\"\".concat(prepareProjectData(),\"\\n\\n\").concat(currentAnalysisType.prompt);};// Call the Hugging Face Inference API\nconst analyzeProject=async()=>{if(!config){setError('KI-Konfiguration konnte nicht geladen werden.');return;}setLoading(true);setError(null);try{const prompt=generatePrompt();const selectedModel=config.defaultModel;// Use the Hugging Face Inference API (requires API key in production)\n// For demo purposes, we'll simulate a response\n// In a real implementation, you would make an API call like this:\n/*\n      const apiKey = config.apiKey || process.env.REACT_APP_HUGGINGFACE_API_KEY;\n      \n      if (!apiKey) {\n        console.warn('Kein API-Schlüssel gefunden, verwende eingeschränkten Zugriff');\n      }\n      \n      const response = await fetch(\n        `https://api-inference.huggingface.co/models/${selectedModel}`,\n        {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            ...(apiKey && { 'Authorization': `Bearer ${apiKey}` })\n          },\n          body: JSON.stringify({ \n            inputs: prompt,\n            parameters: {\n              max_new_tokens: config.maxTokens || 100\n            }\n          }),\n        }\n      );\n      \n      if (!response.ok) {\n        throw new Error(`API error: ${response.status}`);\n      }\n      \n      const data = await response.json();\n      setResult(data[0].generated_text);\n      */// Simulate API response for demo\nawait new Promise(resolve=>setTimeout(resolve,1500));let simulatedResponse;switch(analysisType){case'skills':simulatedResponse=\"\\n- JavaScript/TypeScript\\n- React.js\\n- Node.js\\n- RESTful APIs\\n- Git/GitHub\\n- Agile Entwicklungsmethoden\\n- Erfahrung mit Cloud-Diensten (AWS/Azure)\\n- CI/CD Pipelines\\n          \".trim();break;case'summary':simulatedResponse=\"\\nDas Projekt umfasst die Entwicklung einer modernen Webanwendung mit React.js und Node.js. Es handelt sich um eine Full-Stack-Entwicklung mit Fokus auf Benutzerfreundlichkeit und Skalierbarkeit. Der Entwickler wird in einem agilen Team arbeiten und sollte Erfahrung mit Cloud-Diensten und CI/CD-Prozessen mitbringen.\\n          \".trim();break;case'salary':simulatedResponse=\"\\nBasierend auf den Anforderungen und dem Standort w\\xFCrde ich einen Tagessatz zwischen 750\\u20AC und 950\\u20AC sch\\xE4tzen. Die Spanne kann je nach genauer Erfahrung und Spezialisierung variieren.\\n          \".trim();break;case'custom':simulatedResponse=\"\\nHier ist eine benutzerdefinierte Analyse basierend auf Ihrer Anfrage. In einer Produktivumgebung w\\xFCrde diese Antwort vom ausgew\\xE4hlten KI-Modell generiert werden.\\n          \".trim();break;default:simulatedResponse='Analyse abgeschlossen.';}setResult(simulatedResponse);}catch(err){console.error('Error analyzing project:',err);setError('Fehler bei der Analyse. Bitte versuchen Sie es später erneut.');}finally{setLoading(false);}};return/*#__PURE__*/_jsx(Card,{sx:{mb:3},children:/*#__PURE__*/_jsxs(CardContent,{children:[/*#__PURE__*/_jsxs(Box,{sx:{display:'flex',alignItems:'center',mb:2},children:[/*#__PURE__*/_jsx(SmartToyIcon,{sx:{mr:1}}),/*#__PURE__*/_jsx(Typography,{variant:\"h6\",children:\"KI-Projektanalyse\"})]}),/*#__PURE__*/_jsx(Divider,{sx:{mb:2}}),/*#__PURE__*/_jsxs(Box,{sx:{mb:3},children:[/*#__PURE__*/_jsxs(FormControl,{fullWidth:true,size:\"small\",sx:{mb:2},children:[/*#__PURE__*/_jsx(InputLabel,{children:\"Analysetyp\"}),/*#__PURE__*/_jsx(Select,{value:analysisType,onChange:e=>setAnalysisType(e.target.value),label:\"Analysetyp\",children:analysisTypes.map(type=>/*#__PURE__*/_jsx(MenuItem,{value:type.id,children:type.name},type.id))})]}),analysisType==='custom'&&/*#__PURE__*/_jsx(TextField,{fullWidth:true,multiline:true,rows:3,label:\"Benutzerdefinierte Anfrage\",variant:\"outlined\",size:\"small\",value:customPrompt,onChange:e=>setCustomPrompt(e.target.value),placeholder:\"Stellen Sie Ihre Frage zum Projekt...\",sx:{mb:2}}),/*#__PURE__*/_jsxs(Box,{sx:{mb:2},children:[/*#__PURE__*/_jsxs(Typography,{variant:\"body2\",color:\"text.secondary\",children:[\"Verwendetes Modell: \",config?((_availableModels$find=availableModels.find(m=>m.id===config.defaultModel))===null||_availableModels$find===void 0?void 0:_availableModels$find.name)||config.defaultModel:'Wird geladen...']}),/*#__PURE__*/_jsx(Typography,{variant:\"caption\",color:\"text.secondary\",children:\"Konfigurieren Sie die KI-Einstellungen auf der KI-Seite\"})]}),/*#__PURE__*/_jsx(Button,{variant:\"contained\",onClick:analyzeProject,disabled:loading||analysisType==='custom'&&!customPrompt.trim(),fullWidth:true,children:loading?/*#__PURE__*/_jsx(CircularProgress,{size:24}):'Projekt analysieren'})]}),error&&/*#__PURE__*/_jsx(Alert,{severity:\"error\",sx:{mb:2},children:error}),result&&/*#__PURE__*/_jsxs(Paper,{variant:\"outlined\",sx:{p:2,bgcolor:'background.paper'},children:[/*#__PURE__*/_jsx(Typography,{variant:\"subtitle1\",gutterBottom:true,children:\"Analyseergebnis:\"}),/*#__PURE__*/_jsx(Typography,{variant:\"body2\",component:\"div\",sx:{whiteSpace:'pre-line'},children:result})]})]})});};export default AIProjectAnalyzer;","map":{"version":3,"names":["React","useState","useEffect","Box","Button","Card","CardContent","Typography","TextField","CircularProgress","Alert","Accordion","AccordionSummary","AccordionDetails","Chip","Stack","Divider","FormControl","InputLabel","Select","MenuItem","FormHelperText","Paper","ExpandMoreIcon","SmartToyIcon","getAIConfig","jsx","_jsx","jsxs","_jsxs","AIProjectAnalyzer","_ref","_availableModels$find","project","onClose","loading","setLoading","error","setError","result","setResult","customPrompt","setCustomPrompt","analysisType","setAnalysisType","config","setConfig","aiConfig","availableModels","id","name","type","analysisTypes","prompt","currentAnalysisType","find","prepareProjectData","title","description","location","skills","companyName","concat","Array","isArray","join","trim","generatePrompt","analyzeProject","selectedModel","defaultModel","Promise","resolve","setTimeout","simulatedResponse","err","console","sx","mb","children","display","alignItems","mr","variant","fullWidth","size","value","onChange","e","target","label","map","multiline","rows","placeholder","color","m","onClick","disabled","severity","p","bgcolor","gutterBottom","component","whiteSpace"],"sources":["/Users/mbanner/CascadeProjects/gulp-job-app/frontend/src/components/AIProjectAnalyzer.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Button,\n  Card,\n  CardContent,\n  Typography,\n  TextField,\n  CircularProgress,\n  Alert,\n  Accordion,\n  AccordionSummary,\n  AccordionDetails,\n  Chip,\n  Stack,\n  Divider,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  FormHelperText,\n  Paper\n} from '@mui/material';\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\nimport SmartToyIcon from '@mui/icons-material/SmartToy';\nimport { getAIConfig } from '../utils/aiConfig';\n\n/**\n * Component for AI-powered project analysis\n * Uses Hugging Face Inference API for free AI capabilities\n */\nconst AIProjectAnalyzer = ({ project, onClose }) => {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [result, setResult] = useState(null);\n  const [customPrompt, setCustomPrompt] = useState('');\n  const [analysisType, setAnalysisType] = useState('skills');\n  const [config, setConfig] = useState(null);\n  \n  // Lade KI-Konfiguration beim Komponenten-Mount\n  useEffect(() => {\n    const aiConfig = getAIConfig();\n    setConfig(aiConfig);\n  }, []);\n\n  // Available free models\n  const availableModels = [\n    { id: 'google/flan-t5-small', name: 'Flan-T5 Small (schnell)', type: 'text' },\n    { id: 'google/flan-t5-base', name: 'Flan-T5 Base (ausgewogen)', type: 'text' },\n    { id: 'gpt2', name: 'GPT-2 (kreativ)', type: 'text' }\n  ];\n\n  // Analysis types\n  const analysisTypes = [\n    { id: 'skills', name: 'Benötigte Skills', prompt: 'Welche Fähigkeiten und Technologien werden für dieses Projekt benötigt? Liste sie als Stichpunkte auf.' },\n    { id: 'summary', name: 'Projektzusammenfassung', prompt: 'Fasse dieses Projekt in 3-5 Sätzen zusammen.' },\n    { id: 'salary', name: 'Gehaltseinschätzung', prompt: 'Schätze den möglichen Tagessatz für dieses Projekt basierend auf den Anforderungen und dem Standort. Gib eine Spanne an.' },\n    { id: 'custom', name: 'Benutzerdefinierte Analyse', prompt: '' }\n  ];\n\n  // Get the current analysis type object\n  const currentAnalysisType = analysisTypes.find(type => type.id === analysisType);\n\n  // Prepare project data for analysis\n  const prepareProjectData = () => {\n    const { title, description, location, skills, companyName } = project;\n    \n    return `\nProjekttitel: ${title || 'Nicht angegeben'}\nBeschreibung: ${description || 'Keine Beschreibung verfügbar'}\nStandort: ${location || 'Nicht angegeben'}\nFirma: ${companyName || 'Nicht angegeben'}\nSkills: ${Array.isArray(skills) ? skills.join(', ') : (skills || 'Keine Skills angegeben')}\n    `.trim();\n  };\n\n  // Generate the prompt for the AI model\n  const generatePrompt = () => {\n    if (analysisType === 'custom') {\n      return `${prepareProjectData()}\\n\\n${customPrompt}`;\n    }\n    return `${prepareProjectData()}\\n\\n${currentAnalysisType.prompt}`;\n  };\n\n  // Call the Hugging Face Inference API\n  const analyzeProject = async () => {\n    if (!config) {\n      setError('KI-Konfiguration konnte nicht geladen werden.');\n      return;\n    }\n    \n    setLoading(true);\n    setError(null);\n    \n    try {\n      const prompt = generatePrompt();\n      const selectedModel = config.defaultModel;\n      \n      // Use the Hugging Face Inference API (requires API key in production)\n      // For demo purposes, we'll simulate a response\n      \n      // In a real implementation, you would make an API call like this:\n      /*\n      const apiKey = config.apiKey || process.env.REACT_APP_HUGGINGFACE_API_KEY;\n      \n      if (!apiKey) {\n        console.warn('Kein API-Schlüssel gefunden, verwende eingeschränkten Zugriff');\n      }\n      \n      const response = await fetch(\n        `https://api-inference.huggingface.co/models/${selectedModel}`,\n        {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            ...(apiKey && { 'Authorization': `Bearer ${apiKey}` })\n          },\n          body: JSON.stringify({ \n            inputs: prompt,\n            parameters: {\n              max_new_tokens: config.maxTokens || 100\n            }\n          }),\n        }\n      );\n      \n      if (!response.ok) {\n        throw new Error(`API error: ${response.status}`);\n      }\n      \n      const data = await response.json();\n      setResult(data[0].generated_text);\n      */\n      \n      // Simulate API response for demo\n      await new Promise(resolve => setTimeout(resolve, 1500));\n      \n      let simulatedResponse;\n      \n      switch (analysisType) {\n        case 'skills':\n          simulatedResponse = `\n- JavaScript/TypeScript\n- React.js\n- Node.js\n- RESTful APIs\n- Git/GitHub\n- Agile Entwicklungsmethoden\n- Erfahrung mit Cloud-Diensten (AWS/Azure)\n- CI/CD Pipelines\n          `.trim();\n          break;\n          \n        case 'summary':\n          simulatedResponse = `\nDas Projekt umfasst die Entwicklung einer modernen Webanwendung mit React.js und Node.js. Es handelt sich um eine Full-Stack-Entwicklung mit Fokus auf Benutzerfreundlichkeit und Skalierbarkeit. Der Entwickler wird in einem agilen Team arbeiten und sollte Erfahrung mit Cloud-Diensten und CI/CD-Prozessen mitbringen.\n          `.trim();\n          break;\n          \n        case 'salary':\n          simulatedResponse = `\nBasierend auf den Anforderungen und dem Standort würde ich einen Tagessatz zwischen 750€ und 950€ schätzen. Die Spanne kann je nach genauer Erfahrung und Spezialisierung variieren.\n          `.trim();\n          break;\n          \n        case 'custom':\n          simulatedResponse = `\nHier ist eine benutzerdefinierte Analyse basierend auf Ihrer Anfrage. In einer Produktivumgebung würde diese Antwort vom ausgewählten KI-Modell generiert werden.\n          `.trim();\n          break;\n          \n        default:\n          simulatedResponse = 'Analyse abgeschlossen.';\n      }\n      \n      setResult(simulatedResponse);\n    } catch (err) {\n      console.error('Error analyzing project:', err);\n      setError('Fehler bei der Analyse. Bitte versuchen Sie es später erneut.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <Card sx={{ mb: 3 }}>\n      <CardContent>\n        <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\n          <SmartToyIcon sx={{ mr: 1 }} />\n          <Typography variant=\"h6\">KI-Projektanalyse</Typography>\n        </Box>\n        \n        <Divider sx={{ mb: 2 }} />\n        \n        <Box sx={{ mb: 3 }}>\n          <FormControl fullWidth size=\"small\" sx={{ mb: 2 }}>\n            <InputLabel>Analysetyp</InputLabel>\n            <Select\n              value={analysisType}\n              onChange={(e) => setAnalysisType(e.target.value)}\n              label=\"Analysetyp\"\n            >\n              {analysisTypes.map((type) => (\n                <MenuItem key={type.id} value={type.id}>{type.name}</MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n          \n          {analysisType === 'custom' && (\n            <TextField\n              fullWidth\n              multiline\n              rows={3}\n              label=\"Benutzerdefinierte Anfrage\"\n              variant=\"outlined\"\n              size=\"small\"\n              value={customPrompt}\n              onChange={(e) => setCustomPrompt(e.target.value)}\n              placeholder=\"Stellen Sie Ihre Frage zum Projekt...\"\n              sx={{ mb: 2 }}\n            />\n          )}\n          \n          <Box sx={{ mb: 2 }}>\n            <Typography variant=\"body2\" color=\"text.secondary\">\n              Verwendetes Modell: {config ? availableModels.find(m => m.id === config.defaultModel)?.name || config.defaultModel : 'Wird geladen...'}\n            </Typography>\n            <Typography variant=\"caption\" color=\"text.secondary\">\n              Konfigurieren Sie die KI-Einstellungen auf der KI-Seite\n            </Typography>\n          </Box>\n          \n          <Button\n            variant=\"contained\"\n            onClick={analyzeProject}\n            disabled={loading || (analysisType === 'custom' && !customPrompt.trim())}\n            fullWidth\n          >\n            {loading ? <CircularProgress size={24} /> : 'Projekt analysieren'}\n          </Button>\n        </Box>\n        \n        {error && (\n          <Alert severity=\"error\" sx={{ mb: 2 }}>\n            {error}\n          </Alert>\n        )}\n        \n        {result && (\n          <Paper variant=\"outlined\" sx={{ p: 2, bgcolor: 'background.paper' }}>\n            <Typography variant=\"subtitle1\" gutterBottom>\n              Analyseergebnis:\n            </Typography>\n            <Typography variant=\"body2\" component=\"div\" sx={{ whiteSpace: 'pre-line' }}>\n              {result}\n            </Typography>\n          </Paper>\n        )}\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default AIProjectAnalyzer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}