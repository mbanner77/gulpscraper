{"ast":null,"code":"import axios from 'axios';\n\n// Use environment variable for API URL with fallback for local development\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n\n// Create axios instance with base URL\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Get all projects with optional filters\nexport const getProjects = async (params = {}) => {\n  try {\n    const response = await api.get('/projects', {\n      params\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching projects:', error);\n    throw error;\n  }\n};\n\n// Get scraper status\nexport const getScraperStatus = async () => {\n  try {\n    const response = await api.get('/status');\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching scraper status:', error);\n    throw error;\n  }\n};\n\n// Trigger a new scrape\nexport const triggerScrape = async (options = {}) => {\n  try {\n    const response = await api.post('/scrape', options);\n    return response.data;\n  } catch (error) {\n    console.error('Error triggering scrape:', error);\n    throw error;\n  }\n};\n\n// Get new projects\nexport const getNewProjects = async () => {\n  try {\n    const response = await api.get('/new-projects');\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching new projects:', error);\n    throw error;\n  }\n};\n\n// Mark projects as seen\nexport const markProjectsAsSeen = async projectIds => {\n  try {\n    const response = await api.post('/mark-projects-seen', projectIds);\n    return response.data;\n  } catch (error) {\n    console.error('Error marking projects as seen:', error);\n    throw error;\n  }\n};\n\n// Get email configuration\nexport const getEmailConfig = async () => {\n  try {\n    const response = await api.get('/email-config');\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching email configuration:', error);\n    throw error;\n  }\n};\n\n// Get scheduler configuration\nexport const getSchedulerConfig = async () => {\n  try {\n    const response = await api.get('/scheduler-config');\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching scheduler configuration:', error);\n    throw error;\n  }\n};\n\n// Set email configuration\nexport const setEmailConfig = async config => {\n  try {\n    const response = await api.post('/email-config', config);\n    return response.data;\n  } catch (error) {\n    console.error('Error setting email configuration:', error);\n    throw error;\n  }\n};\n\n// Set scheduler configuration\nexport const setSchedulerConfig = async config => {\n  try {\n    const response = await api.post('/scheduler-config', config);\n    return response.data;\n  } catch (error) {\n    console.error('Error setting scheduler configuration:', error);\n    throw error;\n  }\n};\n\n// Get a single project by ID\nexport const getProjectById = async id => {\n  try {\n    const response = await api.get(`/projects/${id}`);\n    return response.data;\n  } catch (error) {\n    console.error(`Error fetching project with ID ${id}:`, error);\n    throw error;\n  }\n};\n\n// Helper function to manage favorites in localStorage\nexport const favoritesManager = {\n  // Get all favorites\n  getFavorites: () => {\n    try {\n      return JSON.parse(localStorage.getItem('favorites')) || [];\n    } catch (error) {\n      console.error('Error getting favorites from localStorage:', error);\n      return [];\n    }\n  },\n  // Add a project to favorites\n  addFavorite: project => {\n    try {\n      const favorites = favoritesManager.getFavorites();\n      // Check if project is already in favorites\n      if (!favorites.some(fav => fav.id === project.id)) {\n        favorites.push(project);\n        localStorage.setItem('favorites', JSON.stringify(favorites));\n      }\n      return favorites;\n    } catch (error) {\n      console.error('Error adding favorite to localStorage:', error);\n      return [];\n    }\n  },\n  // Remove a project from favorites\n  removeFavorite: projectId => {\n    try {\n      let favorites = favoritesManager.getFavorites();\n      favorites = favorites.filter(fav => fav.id !== projectId);\n      localStorage.setItem('favorites', JSON.stringify(favorites));\n      return favorites;\n    } catch (error) {\n      console.error('Error removing favorite from localStorage:', error);\n      return [];\n    }\n  },\n  // Check if a project is in favorites\n  isFavorite: projectId => {\n    try {\n      const favorites = favoritesManager.getFavorites();\n      return favorites.some(fav => fav.id === projectId);\n    } catch (error) {\n      console.error('Error checking if project is favorite:', error);\n      return false;\n    }\n  }\n};\nexport default {\n  getProjects,\n  getProjectById,\n  getScraperStatus,\n  triggerScrape,\n  getNewProjects,\n  markProjectsAsSeen,\n  getEmailConfig,\n  setEmailConfig,\n  getSchedulerConfig,\n  setSchedulerConfig,\n  favoritesManager\n};","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","getProjects","params","response","get","data","error","console","getScraperStatus","triggerScrape","options","post","getNewProjects","markProjectsAsSeen","projectIds","getEmailConfig","getSchedulerConfig","setEmailConfig","config","setSchedulerConfig","getProjectById","id","favoritesManager","getFavorites","JSON","parse","localStorage","getItem","addFavorite","project","favorites","some","fav","push","setItem","stringify","removeFavorite","projectId","filter","isFavorite"],"sources":["/Users/mbanner/CascadeProjects/gulp-job-app/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\n// Use environment variable for API URL with fallback for local development\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n\n// Create axios instance with base URL\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Get all projects with optional filters\nexport const getProjects = async (params = {}) => {\n  try {\n    const response = await api.get('/projects', { params });\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching projects:', error);\n    throw error;\n  }\n};\n\n// Get scraper status\nexport const getScraperStatus = async () => {\n  try {\n    const response = await api.get('/status');\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching scraper status:', error);\n    throw error;\n  }\n};\n\n// Trigger a new scrape\nexport const triggerScrape = async (options = {}) => {\n  try {\n    const response = await api.post('/scrape', options);\n    return response.data;\n  } catch (error) {\n    console.error('Error triggering scrape:', error);\n    throw error;\n  }\n};\n\n// Get new projects\nexport const getNewProjects = async () => {\n  try {\n    const response = await api.get('/new-projects');\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching new projects:', error);\n    throw error;\n  }\n};\n\n// Mark projects as seen\nexport const markProjectsAsSeen = async (projectIds) => {\n  try {\n    const response = await api.post('/mark-projects-seen', projectIds);\n    return response.data;\n  } catch (error) {\n    console.error('Error marking projects as seen:', error);\n    throw error;\n  }\n};\n\n// Get email configuration\nexport const getEmailConfig = async () => {\n  try {\n    const response = await api.get('/email-config');\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching email configuration:', error);\n    throw error;\n  }\n};\n\n// Get scheduler configuration\nexport const getSchedulerConfig = async () => {\n  try {\n    const response = await api.get('/scheduler-config');\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching scheduler configuration:', error);\n    throw error;\n  }\n};\n\n// Set email configuration\nexport const setEmailConfig = async (config) => {\n  try {\n    const response = await api.post('/email-config', config);\n    return response.data;\n  } catch (error) {\n    console.error('Error setting email configuration:', error);\n    throw error;\n  }\n};\n\n// Set scheduler configuration\nexport const setSchedulerConfig = async (config) => {\n  try {\n    const response = await api.post('/scheduler-config', config);\n    return response.data;\n  } catch (error) {\n    console.error('Error setting scheduler configuration:', error);\n    throw error;\n  }\n};\n\n// Get a single project by ID\nexport const getProjectById = async (id) => {\n  try {\n    const response = await api.get(`/projects/${id}`);\n    return response.data;\n  } catch (error) {\n    console.error(`Error fetching project with ID ${id}:`, error);\n    throw error;\n  }\n};\n\n// Helper function to manage favorites in localStorage\nexport const favoritesManager = {\n  // Get all favorites\n  getFavorites: () => {\n    try {\n      return JSON.parse(localStorage.getItem('favorites')) || [];\n    } catch (error) {\n      console.error('Error getting favorites from localStorage:', error);\n      return [];\n    }\n  },\n  \n  // Add a project to favorites\n  addFavorite: (project) => {\n    try {\n      const favorites = favoritesManager.getFavorites();\n      // Check if project is already in favorites\n      if (!favorites.some(fav => fav.id === project.id)) {\n        favorites.push(project);\n        localStorage.setItem('favorites', JSON.stringify(favorites));\n      }\n      return favorites;\n    } catch (error) {\n      console.error('Error adding favorite to localStorage:', error);\n      return [];\n    }\n  },\n  \n  // Remove a project from favorites\n  removeFavorite: (projectId) => {\n    try {\n      let favorites = favoritesManager.getFavorites();\n      favorites = favorites.filter(fav => fav.id !== projectId);\n      localStorage.setItem('favorites', JSON.stringify(favorites));\n      return favorites;\n    } catch (error) {\n      console.error('Error removing favorite from localStorage:', error);\n      return [];\n    }\n  },\n  \n  // Check if a project is in favorites\n  isFavorite: (projectId) => {\n    try {\n      const favorites = favoritesManager.getFavorites();\n      return favorites.some(fav => fav.id === projectId);\n    } catch (error) {\n      console.error('Error checking if project is favorite:', error);\n      return false;\n    }\n  }\n};\n\nexport default {\n  getProjects,\n  getProjectById,\n  getScraperStatus,\n  triggerScrape,\n  getNewProjects,\n  markProjectsAsSeen,\n  getEmailConfig,\n  setEmailConfig,\n  getSchedulerConfig,\n  setSchedulerConfig,\n  favoritesManager\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}