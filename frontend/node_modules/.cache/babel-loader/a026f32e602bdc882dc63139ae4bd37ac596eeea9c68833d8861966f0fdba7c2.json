{"ast":null,"code":"/**\n * Utility functions for date formatting\n */\n\n/**\n * Format a date string to a localized format\n * @param {string} dateString - ISO date string\n * @returns {string} Formatted date string\n */\nexport const formatDate = dateString => {\n  if (!dateString) return 'Unbekannt';\n  try {\n    const date = new Date(dateString);\n    return date.toLocaleDateString('de-DE', {\n      year: 'numeric',\n      month: '2-digit',\n      day: '2-digit',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  } catch (error) {\n    console.error('Error formatting date:', error);\n    return 'Ungültiges Datum';\n  }\n};\n\n/**\n * Check if a date is within the last 24 hours\n * @param {string} dateString - ISO date string\n * @returns {boolean} True if date is within last 24 hours\n */\nexport const isRecent = dateString => {\n  if (!dateString) return false;\n  try {\n    const date = new Date(dateString);\n    const now = new Date();\n\n    // Handle future dates (data from 2025) by treating them as recent\n    if (date > now) {\n      return true;\n    }\n    const diffMs = now - date;\n    const diffHours = diffMs / (1000 * 60 * 60);\n    return diffHours < 24;\n  } catch (error) {\n    console.error('Error checking if date is recent:', error);\n    return false;\n  }\n};","map":{"version":3,"names":["formatDate","dateString","date","Date","toLocaleDateString","year","month","day","hour","minute","error","console","isRecent","now","diffMs","diffHours"],"sources":["/Users/mbanner/CascadeProjects/gulp-job-app/frontend/src/utils/dateUtils.js"],"sourcesContent":["/**\n * Utility functions for date formatting\n */\n\n/**\n * Format a date string to a localized format\n * @param {string} dateString - ISO date string\n * @returns {string} Formatted date string\n */\nexport const formatDate = (dateString) => {\n  if (!dateString) return 'Unbekannt';\n  \n  try {\n    const date = new Date(dateString);\n    return date.toLocaleDateString('de-DE', {\n      year: 'numeric',\n      month: '2-digit',\n      day: '2-digit',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  } catch (error) {\n    console.error('Error formatting date:', error);\n    return 'Ungültiges Datum';\n  }\n};\n\n/**\n * Check if a date is within the last 24 hours\n * @param {string} dateString - ISO date string\n * @returns {boolean} True if date is within last 24 hours\n */\nexport const isRecent = (dateString) => {\n  if (!dateString) return false;\n  \n  try {\n    const date = new Date(dateString);\n    const now = new Date();\n    \n    // Handle future dates (data from 2025) by treating them as recent\n    if (date > now) {\n      return true;\n    }\n    \n    const diffMs = now - date;\n    const diffHours = diffMs / (1000 * 60 * 60);\n    \n    return diffHours < 24;\n  } catch (error) {\n    console.error('Error checking if date is recent:', error);\n    return false;\n  }\n};\n"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMA,UAAU,GAAIC,UAAU,IAAK;EACxC,IAAI,CAACA,UAAU,EAAE,OAAO,WAAW;EAEnC,IAAI;IACF,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAACF,UAAU,CAAC;IACjC,OAAOC,IAAI,CAACE,kBAAkB,CAAC,OAAO,EAAE;MACtCC,IAAI,EAAE,SAAS;MACfC,KAAK,EAAE,SAAS;MAChBC,GAAG,EAAE,SAAS;MACdC,IAAI,EAAE,SAAS;MACfC,MAAM,EAAE;IACV,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC9C,OAAO,kBAAkB;EAC3B;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAME,QAAQ,GAAIX,UAAU,IAAK;EACtC,IAAI,CAACA,UAAU,EAAE,OAAO,KAAK;EAE7B,IAAI;IACF,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAACF,UAAU,CAAC;IACjC,MAAMY,GAAG,GAAG,IAAIV,IAAI,CAAC,CAAC;;IAEtB;IACA,IAAID,IAAI,GAAGW,GAAG,EAAE;MACd,OAAO,IAAI;IACb;IAEA,MAAMC,MAAM,GAAGD,GAAG,GAAGX,IAAI;IACzB,MAAMa,SAAS,GAAGD,MAAM,IAAI,IAAI,GAAG,EAAE,GAAG,EAAE,CAAC;IAE3C,OAAOC,SAAS,GAAG,EAAE;EACvB,CAAC,CAAC,OAAOL,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;IACzD,OAAO,KAAK;EACd;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}