{"ast":null,"code":"/**\n * Utility functions for date formatting\n *//**\n * Format a date string to a localized format\n * @param {string} dateString - ISO date string\n * @returns {string} Formatted date string\n */export const formatDate=dateString=>{if(!dateString)return'Unbekannt';try{const date=new Date(dateString);return date.toLocaleDateString('de-DE',{year:'numeric',month:'2-digit',day:'2-digit',hour:'2-digit',minute:'2-digit'});}catch(error){console.error('Error formatting date:',error);return'Ungültiges Datum';}};/**\n * Check if a date is within the last 24 hours\n * @param {string} dateString - ISO date string\n * @returns {boolean} True if date is within last 24 hours\n */export const isRecent=dateString=>{if(!dateString)return false;try{const date=new Date(dateString);const now=new Date();// Handle future dates (data from 2025) by treating them as recent\nif(date>now){return true;}const diffMs=now-date;const diffHours=diffMs/(1000*60*60);return diffHours<24;}catch(error){console.error('Error checking if date is recent:',error);return false;}};","map":{"version":3,"names":["formatDate","dateString","date","Date","toLocaleDateString","year","month","day","hour","minute","error","console","isRecent","now","diffMs","diffHours"],"sources":["/Users/mbanner/CascadeProjects/gulp-job-app/frontend/src/utils/dateUtils.js"],"sourcesContent":["/**\n * Utility functions for date formatting\n */\n\n/**\n * Format a date string to a localized format\n * @param {string} dateString - ISO date string\n * @returns {string} Formatted date string\n */\nexport const formatDate = (dateString) => {\n  if (!dateString) return 'Unbekannt';\n  \n  try {\n    const date = new Date(dateString);\n    return date.toLocaleDateString('de-DE', {\n      year: 'numeric',\n      month: '2-digit',\n      day: '2-digit',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  } catch (error) {\n    console.error('Error formatting date:', error);\n    return 'Ungültiges Datum';\n  }\n};\n\n/**\n * Check if a date is within the last 24 hours\n * @param {string} dateString - ISO date string\n * @returns {boolean} True if date is within last 24 hours\n */\nexport const isRecent = (dateString) => {\n  if (!dateString) return false;\n  \n  try {\n    const date = new Date(dateString);\n    const now = new Date();\n    \n    // Handle future dates (data from 2025) by treating them as recent\n    if (date > now) {\n      return true;\n    }\n    \n    const diffMs = now - date;\n    const diffHours = diffMs / (1000 * 60 * 60);\n    \n    return diffHours < 24;\n  } catch (error) {\n    console.error('Error checking if date is recent:', error);\n    return false;\n  }\n};\n"],"mappings":"AAAA;AACA;AACA,GAEA;AACA;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAA,UAAU,CAAIC,UAAU,EAAK,CACxC,GAAI,CAACA,UAAU,CAAE,MAAO,WAAW,CAEnC,GAAI,CACF,KAAM,CAAAC,IAAI,CAAG,GAAI,CAAAC,IAAI,CAACF,UAAU,CAAC,CACjC,MAAO,CAAAC,IAAI,CAACE,kBAAkB,CAAC,OAAO,CAAE,CACtCC,IAAI,CAAE,SAAS,CACfC,KAAK,CAAE,SAAS,CAChBC,GAAG,CAAE,SAAS,CACdC,IAAI,CAAE,SAAS,CACfC,MAAM,CAAE,SACV,CAAC,CAAC,CACJ,CAAE,MAAOC,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,CAAEA,KAAK,CAAC,CAC9C,MAAO,kBAAkB,CAC3B,CACF,CAAC,CAED;AACA;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAE,QAAQ,CAAIX,UAAU,EAAK,CACtC,GAAI,CAACA,UAAU,CAAE,MAAO,MAAK,CAE7B,GAAI,CACF,KAAM,CAAAC,IAAI,CAAG,GAAI,CAAAC,IAAI,CAACF,UAAU,CAAC,CACjC,KAAM,CAAAY,GAAG,CAAG,GAAI,CAAAV,IAAI,CAAC,CAAC,CAEtB;AACA,GAAID,IAAI,CAAGW,GAAG,CAAE,CACd,MAAO,KAAI,CACb,CAEA,KAAM,CAAAC,MAAM,CAAGD,GAAG,CAAGX,IAAI,CACzB,KAAM,CAAAa,SAAS,CAAGD,MAAM,EAAI,IAAI,CAAG,EAAE,CAAG,EAAE,CAAC,CAE3C,MAAO,CAAAC,SAAS,CAAG,EAAE,CACvB,CAAE,MAAOL,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,mCAAmC,CAAEA,KAAK,CAAC,CACzD,MAAO,MAAK,CACd,CACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}