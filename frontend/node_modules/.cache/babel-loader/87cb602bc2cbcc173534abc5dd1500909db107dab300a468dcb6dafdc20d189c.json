{"ast":null,"code":"import axios from'axios';// Use environment variable for API URL with fallback for local development\nconst API_URL=process.env.REACT_APP_API_URL||'http://localhost:8000';// Create axios instance with base URL\nconst api=axios.create({baseURL:API_URL,headers:{'Content-Type':'application/json'}});// Get recent projects (last 24h) with optional filters\nexport const getProjects=async function(){let params=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};try{const response=await api.get('/projects',{params});return response.data;}catch(error){console.error('Error fetching recent projects:',error);throw error;}};// Get archived projects (older than 24h) with optional filters\nexport const getArchivedProjects=async function(){let params=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};try{const response=await api.get('/projects/archive',{params});return response.data;}catch(error){console.error('Error fetching archived projects:',error);throw error;}};// Get scraper status\nexport const getScraperStatus=async()=>{try{const response=await api.get('/status');return response.data;}catch(error){console.error('Error fetching scraper status:',error);throw error;}};// Trigger a new scrape\nexport const triggerScrape=async function(){let options=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};try{const response=await api.post('/scrape',options);return response.data;}catch(error){console.error('Error triggering scrape:',error);throw error;}};// Get new projects\nexport const getNewProjects=async()=>{try{const response=await api.get('/new-projects');return response.data;}catch(error){console.error('Error fetching new projects:',error);throw error;}};// Mark projects as seen\nexport const markProjectsAsSeen=async projectIds=>{try{const response=await api.post('/mark-projects-seen',projectIds);return response.data;}catch(error){console.error('Error marking projects as seen:',error);throw error;}};// Get email configuration\nexport const getEmailConfig=async()=>{try{const response=await api.get('/email-config');return response.data;}catch(error){console.error('Error fetching email configuration:',error);throw error;}};// Get scheduler configuration\nexport const getSchedulerConfig=async()=>{try{const response=await api.get('/scheduler-config');return response.data;}catch(error){console.error('Error fetching scheduler configuration:',error);throw error;}};// Set email configuration\nexport const setEmailConfig=async config=>{try{const response=await api.post('/email-config',config);return response.data;}catch(error){console.error('Error setting email configuration:',error);throw error;}};// Set scheduler configuration\nexport const setSchedulerConfig=async config=>{try{const response=await api.post('/scheduler-config',config);return response.data;}catch(error){console.error('Error setting scheduler configuration:',error);throw error;}};// Get a single project by ID\nexport const getProjectById=async id=>{try{const response=await api.get(\"/projects/\".concat(id));return response.data;}catch(error){console.error(\"Error fetching project with ID \".concat(id,\":\"),error);throw error;}};// Helper function to manage favorites in localStorage\nexport const favoritesManager={// Get all favorites\ngetFavorites:()=>{try{return JSON.parse(localStorage.getItem('favorites'))||[];}catch(error){console.error('Error getting favorites from localStorage:',error);return[];}},// Add a project to favorites\naddFavorite:project=>{try{const favorites=favoritesManager.getFavorites();// Check if project is already in favorites\nif(!favorites.some(fav=>fav.id===project.id)){favorites.push(project);localStorage.setItem('favorites',JSON.stringify(favorites));}return favorites;}catch(error){console.error('Error adding favorite to localStorage:',error);return[];}},// Remove a project from favorites\nremoveFavorite:projectId=>{try{let favorites=favoritesManager.getFavorites();favorites=favorites.filter(fav=>fav.id!==projectId);localStorage.setItem('favorites',JSON.stringify(favorites));return favorites;}catch(error){console.error('Error removing favorite from localStorage:',error);return[];}},// Check if a project is in favorites\nisFavorite:projectId=>{try{const favorites=favoritesManager.getFavorites();return favorites.some(fav=>fav.id===projectId);}catch(error){console.error('Error checking if project is favorite:',error);return false;}}};export default{getProjects,getProjectById,getScraperStatus,triggerScrape,getNewProjects,markProjectsAsSeen,getEmailConfig,setEmailConfig,getSchedulerConfig,setSchedulerConfig,favoritesManager};","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","getProjects","params","arguments","length","undefined","response","get","data","error","console","getArchivedProjects","getScraperStatus","triggerScrape","options","post","getNewProjects","markProjectsAsSeen","projectIds","getEmailConfig","getSchedulerConfig","setEmailConfig","config","setSchedulerConfig","getProjectById","id","concat","favoritesManager","getFavorites","JSON","parse","localStorage","getItem","addFavorite","project","favorites","some","fav","push","setItem","stringify","removeFavorite","projectId","filter","isFavorite"],"sources":["/Users/mbanner/CascadeProjects/gulp-job-app/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\n// Use environment variable for API URL with fallback for local development\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n\n// Create axios instance with base URL\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Get recent projects (last 24h) with optional filters\nexport const getProjects = async (params = {}) => {\n  try {\n    const response = await api.get('/projects', { params });\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching recent projects:', error);\n    throw error;\n  }\n};\n\n// Get archived projects (older than 24h) with optional filters\nexport const getArchivedProjects = async (params = {}) => {\n  try {\n    const response = await api.get('/projects/archive', { params });\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching archived projects:', error);\n    throw error;\n  }\n};\n\n// Get scraper status\nexport const getScraperStatus = async () => {\n  try {\n    const response = await api.get('/status');\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching scraper status:', error);\n    throw error;\n  }\n};\n\n// Trigger a new scrape\nexport const triggerScrape = async (options = {}) => {\n  try {\n    const response = await api.post('/scrape', options);\n    return response.data;\n  } catch (error) {\n    console.error('Error triggering scrape:', error);\n    throw error;\n  }\n};\n\n// Get new projects\nexport const getNewProjects = async () => {\n  try {\n    const response = await api.get('/new-projects');\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching new projects:', error);\n    throw error;\n  }\n};\n\n// Mark projects as seen\nexport const markProjectsAsSeen = async (projectIds) => {\n  try {\n    const response = await api.post('/mark-projects-seen', projectIds);\n    return response.data;\n  } catch (error) {\n    console.error('Error marking projects as seen:', error);\n    throw error;\n  }\n};\n\n// Get email configuration\nexport const getEmailConfig = async () => {\n  try {\n    const response = await api.get('/email-config');\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching email configuration:', error);\n    throw error;\n  }\n};\n\n// Get scheduler configuration\nexport const getSchedulerConfig = async () => {\n  try {\n    const response = await api.get('/scheduler-config');\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching scheduler configuration:', error);\n    throw error;\n  }\n};\n\n// Set email configuration\nexport const setEmailConfig = async (config) => {\n  try {\n    const response = await api.post('/email-config', config);\n    return response.data;\n  } catch (error) {\n    console.error('Error setting email configuration:', error);\n    throw error;\n  }\n};\n\n// Set scheduler configuration\nexport const setSchedulerConfig = async (config) => {\n  try {\n    const response = await api.post('/scheduler-config', config);\n    return response.data;\n  } catch (error) {\n    console.error('Error setting scheduler configuration:', error);\n    throw error;\n  }\n};\n\n// Get a single project by ID\nexport const getProjectById = async (id) => {\n  try {\n    const response = await api.get(`/projects/${id}`);\n    return response.data;\n  } catch (error) {\n    console.error(`Error fetching project with ID ${id}:`, error);\n    throw error;\n  }\n};\n\n// Helper function to manage favorites in localStorage\nexport const favoritesManager = {\n  // Get all favorites\n  getFavorites: () => {\n    try {\n      return JSON.parse(localStorage.getItem('favorites')) || [];\n    } catch (error) {\n      console.error('Error getting favorites from localStorage:', error);\n      return [];\n    }\n  },\n  \n  // Add a project to favorites\n  addFavorite: (project) => {\n    try {\n      const favorites = favoritesManager.getFavorites();\n      // Check if project is already in favorites\n      if (!favorites.some(fav => fav.id === project.id)) {\n        favorites.push(project);\n        localStorage.setItem('favorites', JSON.stringify(favorites));\n      }\n      return favorites;\n    } catch (error) {\n      console.error('Error adding favorite to localStorage:', error);\n      return [];\n    }\n  },\n  \n  // Remove a project from favorites\n  removeFavorite: (projectId) => {\n    try {\n      let favorites = favoritesManager.getFavorites();\n      favorites = favorites.filter(fav => fav.id !== projectId);\n      localStorage.setItem('favorites', JSON.stringify(favorites));\n      return favorites;\n    } catch (error) {\n      console.error('Error removing favorite from localStorage:', error);\n      return [];\n    }\n  },\n  \n  // Check if a project is in favorites\n  isFavorite: (projectId) => {\n    try {\n      const favorites = favoritesManager.getFavorites();\n      return favorites.some(fav => fav.id === projectId);\n    } catch (error) {\n      console.error('Error checking if project is favorite:', error);\n      return false;\n    }\n  }\n};\n\nexport default {\n  getProjects,\n  getProjectById,\n  getScraperStatus,\n  triggerScrape,\n  getNewProjects,\n  markProjectsAsSeen,\n  getEmailConfig,\n  setEmailConfig,\n  getSchedulerConfig,\n  setSchedulerConfig,\n  favoritesManager\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}