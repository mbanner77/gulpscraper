{"ast":null,"code":"import axios from'axios';// Determine the API URL based on environment\nconst determineApiUrl=()=>{// If explicit API URL is provided in environment, use it\nif(process.env.REACT_APP_API_URL){return process.env.REACT_APP_API_URL;}// For Render deployment: if frontend is on render.com, assume backend is too\nif(window.location.hostname.includes('render.com')||window.location.hostname.includes('onrender.com')){// Extract the app name from the hostname (e.g., gulp-frontend-abc.onrender.com -> gulp)\nconst hostParts=window.location.hostname.split('-');if(hostParts.length>0){const appPrefix=hostParts[0];// e.g., 'gulp'\n// Construct backend URL with same app prefix but -backend suffix\nreturn\"https://\".concat(appPrefix,\"-backend.onrender.com\");}// Fallback for Render but unknown pattern\nreturn window.location.origin.replace('frontend','backend');}// Local development\nreturn'http://localhost:8001';// Updated to match our current port\n};const API_URL=determineApiUrl();console.log('Using API URL:',API_URL);// Create axios instance with base URL\nconst api=axios.create({baseURL:API_URL,headers:{'Content-Type':'application/json'},// Add withCredentials for CORS with credentials\nwithCredentials:API_URL.includes('render.com')||API_URL.includes('onrender.com')});// Get recent projects (last 24h) with optional filters\nexport const getProjects=async function(){let params=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};try{const response=await api.get('/projects',{params});return response.data;}catch(error){console.error('Error fetching recent projects:',error);throw error;}};// Get archived projects (older than 24h) with optional filters\nexport const getArchivedProjects=async function(){let params=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};try{const response=await api.get('/projects/archive',{params});return response.data;}catch(error){console.error('Error fetching archived projects:',error);throw error;}};// Get scraper status\nexport const getScraperStatus=async()=>{try{const response=await api.get('/status');return response.data;}catch(error){console.error('Error fetching scraper status:',error);throw error;}};// Trigger a new scrape\nexport const triggerScrape=async function(){let options=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};try{const response=await api.post('/scrape',options);return response.data;}catch(error){console.error('Error triggering scrape:',error);throw error;}};// Get new projects\nexport const getNewProjects=async()=>{try{const response=await api.get('/new-projects');return response.data;}catch(error){console.error('Error fetching new projects:',error);throw error;}};// Mark projects as seen\nexport const markProjectsAsSeen=async projectIds=>{try{const response=await api.post('/mark-projects-seen',projectIds);return response.data;}catch(error){console.error('Error marking projects as seen:',error);throw error;}};// Get email configuration\nexport const getEmailConfig=async()=>{try{const response=await api.get('/email-config');return response.data;}catch(error){console.error('Error fetching email configuration:',error);throw error;}};// Get scheduler configuration\nexport const getSchedulerConfig=async()=>{try{const response=await api.get('/scheduler-config');return response.data;}catch(error){console.error('Error fetching scheduler configuration:',error);throw error;}};// Set email configuration\nexport const setEmailConfig=async config=>{try{const response=await api.post('/email-config',config);return response.data;}catch(error){console.error('Error setting email configuration:',error);throw error;}};// Set scheduler configuration\nexport const setSchedulerConfig=async config=>{try{const response=await api.post('/scheduler-config',config);return response.data;}catch(error){console.error('Error setting scheduler configuration:',error);throw error;}};// Get a single project by ID\nexport const getProjectById=async id=>{try{const response=await api.get(\"/projects/\".concat(id));return response.data;}catch(error){console.error(\"Error fetching project with ID \".concat(id,\":\"),error);throw error;}};// Helper function to manage favorites in localStorage\nexport const favoritesManager={// Get all favorites\ngetFavorites:()=>{try{return JSON.parse(localStorage.getItem('favorites'))||[];}catch(error){console.error('Error getting favorites from localStorage:',error);return[];}},// Add a project to favorites\naddFavorite:project=>{try{const favorites=favoritesManager.getFavorites();// Check if project is already in favorites\nif(!favorites.some(fav=>fav.id===project.id)){favorites.push(project);localStorage.setItem('favorites',JSON.stringify(favorites));}return favorites;}catch(error){console.error('Error adding favorite to localStorage:',error);return[];}},// Remove a project from favorites\nremoveFavorite:projectId=>{try{let favorites=favoritesManager.getFavorites();favorites=favorites.filter(fav=>fav.id!==projectId);localStorage.setItem('favorites',JSON.stringify(favorites));return favorites;}catch(error){console.error('Error removing favorite from localStorage:',error);return[];}},// Check if a project is in favorites\nisFavorite:projectId=>{try{const favorites=favoritesManager.getFavorites();return favorites.some(fav=>fav.id===projectId);}catch(error){console.error('Error checking if project is favorite:',error);return false;}}};export default{getProjects,getProjectById,getScraperStatus,triggerScrape,getNewProjects,markProjectsAsSeen,getEmailConfig,setEmailConfig,getSchedulerConfig,setSchedulerConfig,favoritesManager};","map":{"version":3,"names":["axios","determineApiUrl","process","env","REACT_APP_API_URL","window","location","hostname","includes","hostParts","split","length","appPrefix","concat","origin","replace","API_URL","console","log","api","create","baseURL","headers","withCredentials","getProjects","params","arguments","undefined","response","get","data","error","getArchivedProjects","getScraperStatus","triggerScrape","options","post","getNewProjects","markProjectsAsSeen","projectIds","getEmailConfig","getSchedulerConfig","setEmailConfig","config","setSchedulerConfig","getProjectById","id","favoritesManager","getFavorites","JSON","parse","localStorage","getItem","addFavorite","project","favorites","some","fav","push","setItem","stringify","removeFavorite","projectId","filter","isFavorite"],"sources":["/Users/mbanner/CascadeProjects/gulp-job-app/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\n// Determine the API URL based on environment\nconst determineApiUrl = () => {\n  // If explicit API URL is provided in environment, use it\n  if (process.env.REACT_APP_API_URL) {\n    return process.env.REACT_APP_API_URL;\n  }\n  \n  // For Render deployment: if frontend is on render.com, assume backend is too\n  if (window.location.hostname.includes('render.com') || \n      window.location.hostname.includes('onrender.com')) {\n    // Extract the app name from the hostname (e.g., gulp-frontend-abc.onrender.com -> gulp)\n    const hostParts = window.location.hostname.split('-');\n    if (hostParts.length > 0) {\n      const appPrefix = hostParts[0]; // e.g., 'gulp'\n      // Construct backend URL with same app prefix but -backend suffix\n      return `https://${appPrefix}-backend.onrender.com`;\n    }\n    // Fallback for Render but unknown pattern\n    return window.location.origin.replace('frontend', 'backend');\n  }\n  \n  // Local development\n  return 'http://localhost:8001'; // Updated to match our current port\n};\n\nconst API_URL = determineApiUrl();\nconsole.log('Using API URL:', API_URL);\n\n// Create axios instance with base URL\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n  // Add withCredentials for CORS with credentials\n  withCredentials: API_URL.includes('render.com') || API_URL.includes('onrender.com'),\n});\n\n// Get recent projects (last 24h) with optional filters\nexport const getProjects = async (params = {}) => {\n  try {\n    const response = await api.get('/projects', { params });\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching recent projects:', error);\n    throw error;\n  }\n};\n\n// Get archived projects (older than 24h) with optional filters\nexport const getArchivedProjects = async (params = {}) => {\n  try {\n    const response = await api.get('/projects/archive', { params });\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching archived projects:', error);\n    throw error;\n  }\n};\n\n// Get scraper status\nexport const getScraperStatus = async () => {\n  try {\n    const response = await api.get('/status');\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching scraper status:', error);\n    throw error;\n  }\n};\n\n// Trigger a new scrape\nexport const triggerScrape = async (options = {}) => {\n  try {\n    const response = await api.post('/scrape', options);\n    return response.data;\n  } catch (error) {\n    console.error('Error triggering scrape:', error);\n    throw error;\n  }\n};\n\n// Get new projects\nexport const getNewProjects = async () => {\n  try {\n    const response = await api.get('/new-projects');\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching new projects:', error);\n    throw error;\n  }\n};\n\n// Mark projects as seen\nexport const markProjectsAsSeen = async (projectIds) => {\n  try {\n    const response = await api.post('/mark-projects-seen', projectIds);\n    return response.data;\n  } catch (error) {\n    console.error('Error marking projects as seen:', error);\n    throw error;\n  }\n};\n\n// Get email configuration\nexport const getEmailConfig = async () => {\n  try {\n    const response = await api.get('/email-config');\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching email configuration:', error);\n    throw error;\n  }\n};\n\n// Get scheduler configuration\nexport const getSchedulerConfig = async () => {\n  try {\n    const response = await api.get('/scheduler-config');\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching scheduler configuration:', error);\n    throw error;\n  }\n};\n\n// Set email configuration\nexport const setEmailConfig = async (config) => {\n  try {\n    const response = await api.post('/email-config', config);\n    return response.data;\n  } catch (error) {\n    console.error('Error setting email configuration:', error);\n    throw error;\n  }\n};\n\n// Set scheduler configuration\nexport const setSchedulerConfig = async (config) => {\n  try {\n    const response = await api.post('/scheduler-config', config);\n    return response.data;\n  } catch (error) {\n    console.error('Error setting scheduler configuration:', error);\n    throw error;\n  }\n};\n\n// Get a single project by ID\nexport const getProjectById = async (id) => {\n  try {\n    const response = await api.get(`/projects/${id}`);\n    return response.data;\n  } catch (error) {\n    console.error(`Error fetching project with ID ${id}:`, error);\n    throw error;\n  }\n};\n\n// Helper function to manage favorites in localStorage\nexport const favoritesManager = {\n  // Get all favorites\n  getFavorites: () => {\n    try {\n      return JSON.parse(localStorage.getItem('favorites')) || [];\n    } catch (error) {\n      console.error('Error getting favorites from localStorage:', error);\n      return [];\n    }\n  },\n  \n  // Add a project to favorites\n  addFavorite: (project) => {\n    try {\n      const favorites = favoritesManager.getFavorites();\n      // Check if project is already in favorites\n      if (!favorites.some(fav => fav.id === project.id)) {\n        favorites.push(project);\n        localStorage.setItem('favorites', JSON.stringify(favorites));\n      }\n      return favorites;\n    } catch (error) {\n      console.error('Error adding favorite to localStorage:', error);\n      return [];\n    }\n  },\n  \n  // Remove a project from favorites\n  removeFavorite: (projectId) => {\n    try {\n      let favorites = favoritesManager.getFavorites();\n      favorites = favorites.filter(fav => fav.id !== projectId);\n      localStorage.setItem('favorites', JSON.stringify(favorites));\n      return favorites;\n    } catch (error) {\n      console.error('Error removing favorite from localStorage:', error);\n      return [];\n    }\n  },\n  \n  // Check if a project is in favorites\n  isFavorite: (projectId) => {\n    try {\n      const favorites = favoritesManager.getFavorites();\n      return favorites.some(fav => fav.id === projectId);\n    } catch (error) {\n      console.error('Error checking if project is favorite:', error);\n      return false;\n    }\n  }\n};\n\nexport default {\n  getProjects,\n  getProjectById,\n  getScraperStatus,\n  triggerScrape,\n  getNewProjects,\n  markProjectsAsSeen,\n  getEmailConfig,\n  setEmailConfig,\n  getSchedulerConfig,\n  setSchedulerConfig,\n  favoritesManager\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}